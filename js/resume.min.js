/*!
 * Start Bootstrap - Resume v4.0.0-beta.2 (https://startbootstrap.com/template-overviews/resume)
 * Copyright 2013-2017 Start Bootstrap
 * Licensed under MIT (https://github.com/BlackrockDigital/startbootstrap-resume/blob/master/LICENSE)
 */

(function ($) {
  "use strict";

  !(function (e) {
    "use strict";
    e('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function () {
      if (
        location.pathname.replace(/^\//, "") ==
          this.pathname.replace(/^\//, "") &&
        location.hostname == this.hostname
      ) {
        var t = e(this.hash);
        if ((t = t.length ? t : e("[name=" + this.hash.slice(1) + "]")).length)
          return (
            e("html, body").animate(
              {
                scrollTop: t.offset().top,
              },
              1e3,
              "easeInOutExpo"
            ),
            !1
          );
      }
    }),
      e(".js-scroll-trigger").click(function () {
        e(".navbar-collapse").collapse("hide");
      }),
      e("body").scrollspy({
        target: "#sideNav",
      });
  })(jQuery);

  $(document).ready(function () {
    function isElementInViewport(el) {
      const rect = el.getBoundingClientRect();
      return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <=
          (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <=
          (window.innerWidth || document.documentElement.clientWidth)
      );
    }

    function runConfetti() {
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
      });
    }

    const awardsSection = document.querySelector(".resume-section#awards");
    let confettiPlayed = false;

    window.addEventListener("scroll", function () {
      if (isElementInViewport(awardsSection) && !confettiPlayed) {
        runConfetti();
        confettiPlayed = true;
      }
    });
  });

  // Function to check if an element is in the viewport
  function isInViewport(element) {
    const rect = element.getBoundingClientRect();
    const html = document.documentElement;
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || html.clientHeight) &&
      rect.right <= (window.innerWidth || html.clientWidth)
    );
  }

  // Function to run confetti
  function runConfetti() {
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
    });
  }

  // Scroll event listener
  window.addEventListener("scroll", function () {
    const awardsSection = document.querySelector("#awards");
    if (isInViewport(awardsSection)) {
      runConfetti();
    }
  });

  document.addEventListener("DOMContentLoaded", function () {
    var options = {
      strings: [
        "a software engineer",
        "an EMBEDDED AI &#38; ROBOTICS ENGINEER",
        "a fullstack developer",
        "an adventurer",
      ],
      typeSpeed: 70,
      backSpeed: 25,
      loop: true,
      showCursor: true, // Enable cursor
      cursorChar: "_", // Set the cursor character to underscore
      backDelay: 1000, // Pause before backspacing
    };

    new Typed("#typed-output", options);
  });
})(jQuery);

/*==================== DARK LIGHT THEME ====================*/
const themeButton = document.getElementById("theme-button");
const toggleContainer = document.querySelector(".toggle-container");
const sunIcon = document.getElementById("sun-icon");
const moonIcon = document.getElementById("moon-icon");
const darkTheme = "dark-mode";

// Previously selected theme (if user selected)
const selectedTheme = localStorage.getItem("selected-theme");

// Apply the saved theme or set the default
if (!selectedTheme) {
  document.body.classList.add(darkTheme); // Default dark theme
} else {
  document.body.classList[selectedTheme === "dark" ? "add" : "remove"](
    darkTheme
  );
}

// Function to get the current theme
const getCurrentTheme = () =>
  document.body.classList.contains(darkTheme) ? "dark" : "light";

// Activate / deactivate the theme manually with the button
themeButton.addEventListener("click", () => {
  // Toggle the dark theme
  document.body.classList.toggle(darkTheme);

  // Save the current theme in localStorage
  localStorage.setItem("selected-theme", getCurrentTheme());
});
